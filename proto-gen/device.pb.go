// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package libhuestacean

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceProvider_State int32

const (
	DeviceProvider_Disconnected DeviceProvider_State = 0
	DeviceProvider_Connecting   DeviceProvider_State = 1
	DeviceProvider_PendingLink  DeviceProvider_State = 2
	DeviceProvider_Connected    DeviceProvider_State = 3
)

var DeviceProvider_State_name = map[int32]string{
	0: "Disconnected",
	1: "Connecting",
	2: "PendingLink",
	3: "Connected",
}
var DeviceProvider_State_value = map[string]int32{
	"Disconnected": 0,
	"Connecting":   1,
	"PendingLink":  2,
	"Connected":    3,
}

func (x DeviceProvider_State) String() string {
	return proto.EnumName(DeviceProvider_State_name, int32(x))
}
func (DeviceProvider_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{3, 0}
}

// Describes a type of light provider known by the daemon
type DeviceProviderArchetype struct {
	// Archetype's name, e.g. "Philips Hue bridge"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the provider supports low latency light updates
	LowLatencySupported bool `protobuf:"varint,2,opt,name=low_latency_supported,json=lowLatencySupported,proto3" json:"low_latency_supported,omitempty"`
	// if > 0, how many low-latency lights can be present at once; if <= 0, no limit
	MaxLowLatency        uint32   `protobuf:"varint,3,opt,name=max_low_latency,json=maxLowLatency,proto3" json:"max_low_latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceProviderArchetype) Reset()         { *m = DeviceProviderArchetype{} }
func (m *DeviceProviderArchetype) String() string { return proto.CompactTextString(m) }
func (*DeviceProviderArchetype) ProtoMessage()    {}
func (*DeviceProviderArchetype) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{0}
}
func (m *DeviceProviderArchetype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceProviderArchetype.Unmarshal(m, b)
}
func (m *DeviceProviderArchetype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceProviderArchetype.Marshal(b, m, deterministic)
}
func (dst *DeviceProviderArchetype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProviderArchetype.Merge(dst, src)
}
func (m *DeviceProviderArchetype) XXX_Size() int {
	return xxx_messageInfo_DeviceProviderArchetype.Size(m)
}
func (m *DeviceProviderArchetype) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProviderArchetype.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProviderArchetype proto.InternalMessageInfo

func (m *DeviceProviderArchetype) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceProviderArchetype) GetLowLatencySupported() bool {
	if m != nil {
		return m.LowLatencySupported
	}
	return false
}

func (m *DeviceProviderArchetype) GetMaxLowLatency() uint32 {
	if m != nil {
		return m.MaxLowLatency
	}
	return 0
}

// A light contained within a device archetype, with its default location
type DeviceArchetypeLight struct {
	DefaultLocation      *LightLocation `protobuf:"bytes,1,opt,name=default_location,json=defaultLocation,proto3" json:"default_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeviceArchetypeLight) Reset()         { *m = DeviceArchetypeLight{} }
func (m *DeviceArchetypeLight) String() string { return proto.CompactTextString(m) }
func (*DeviceArchetypeLight) ProtoMessage()    {}
func (*DeviceArchetypeLight) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{1}
}
func (m *DeviceArchetypeLight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceArchetypeLight.Unmarshal(m, b)
}
func (m *DeviceArchetypeLight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceArchetypeLight.Marshal(b, m, deterministic)
}
func (dst *DeviceArchetypeLight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceArchetypeLight.Merge(dst, src)
}
func (m *DeviceArchetypeLight) XXX_Size() int {
	return xxx_messageInfo_DeviceArchetypeLight.Size(m)
}
func (m *DeviceArchetypeLight) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceArchetypeLight.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceArchetypeLight proto.InternalMessageInfo

func (m *DeviceArchetypeLight) GetDefaultLocation() *LightLocation {
	if m != nil {
		return m.DefaultLocation
	}
	return nil
}

// Describes a type of device known by the daemon
type DeviceArchetype struct {
	// Whether the lights contained within can be moved (if not, only the whole device can be moved)
	AreLightsMovable bool `protobuf:"varint,1,opt,name=are_lights_movable,json=areLightsMovable,proto3" json:"are_lights_movable,omitempty"`
	// This device's lights, with their default location.
	// the key, an int, is unique only _within_ this device; e.g. two Devices may have the same Light0
	Lights               map[uint32]*DeviceArchetypeLight `protobuf:"bytes,2,rep,name=lights,proto3" json:"lights,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *DeviceArchetype) Reset()         { *m = DeviceArchetype{} }
func (m *DeviceArchetype) String() string { return proto.CompactTextString(m) }
func (*DeviceArchetype) ProtoMessage()    {}
func (*DeviceArchetype) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{2}
}
func (m *DeviceArchetype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceArchetype.Unmarshal(m, b)
}
func (m *DeviceArchetype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceArchetype.Marshal(b, m, deterministic)
}
func (dst *DeviceArchetype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceArchetype.Merge(dst, src)
}
func (m *DeviceArchetype) XXX_Size() int {
	return xxx_messageInfo_DeviceArchetype.Size(m)
}
func (m *DeviceArchetype) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceArchetype.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceArchetype proto.InternalMessageInfo

func (m *DeviceArchetype) GetAreLightsMovable() bool {
	if m != nil {
		return m.AreLightsMovable
	}
	return false
}

func (m *DeviceArchetype) GetLights() map[uint32]*DeviceArchetypeLight {
	if m != nil {
		return m.Lights
	}
	return nil
}

// DeviceProvider is a service the daemon is using to connect to lights,
// e.g. it may be a single Hue bridge, or it may be the Razer Chroma SDK
type DeviceProvider struct {
	// What sort of light provider is this? This is the underlying tech / API being used.
	ArchetypeId uint32 `protobuf:"varint,1,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	// Name of the light provider. Disambiguates between providers of the same archetype.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Current state this DeviceProvider is in
	State                DeviceProvider_State `protobuf:"varint,3,opt,name=state,proto3,enum=libhuestacean.DeviceProvider_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DeviceProvider) Reset()         { *m = DeviceProvider{} }
func (m *DeviceProvider) String() string { return proto.CompactTextString(m) }
func (*DeviceProvider) ProtoMessage()    {}
func (*DeviceProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{3}
}
func (m *DeviceProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceProvider.Unmarshal(m, b)
}
func (m *DeviceProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceProvider.Marshal(b, m, deterministic)
}
func (dst *DeviceProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProvider.Merge(dst, src)
}
func (m *DeviceProvider) XXX_Size() int {
	return xxx_messageInfo_DeviceProvider.Size(m)
}
func (m *DeviceProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProvider.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProvider proto.InternalMessageInfo

func (m *DeviceProvider) GetArchetypeId() uint32 {
	if m != nil {
		return m.ArchetypeId
	}
	return 0
}

func (m *DeviceProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceProvider) GetState() DeviceProvider_State {
	if m != nil {
		return m.State
	}
	return DeviceProvider_Disconnected
}

// Devices are a thing in the real-world that emit light, and that Huestacean can control.
type Device struct {
	// What sort of light is this? This is the underlying tech / API being used.
	ArchetypeId uint32 `protobuf:"varint,1,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	// The device's friendly name, if it has one
	Name                 uint32   `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{4}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (dst *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(dst, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetArchetypeId() uint32 {
	if m != nil {
		return m.ArchetypeId
	}
	return 0
}

func (m *Device) GetName() uint32 {
	if m != nil {
		return m.Name
	}
	return 0
}

// The position of a light in the room is given as an axis-aligned box.
// This position is given as relative to its device.
type LightLocation struct {
	MinX                 float32  `protobuf:"fixed32,1,opt,name=min_x,json=minX,proto3" json:"min_x,omitempty"`
	MinY                 float32  `protobuf:"fixed32,2,opt,name=min_y,json=minY,proto3" json:"min_y,omitempty"`
	MinZ                 float32  `protobuf:"fixed32,3,opt,name=min_z,json=minZ,proto3" json:"min_z,omitempty"`
	MaxX                 float32  `protobuf:"fixed32,4,opt,name=max_x,json=maxX,proto3" json:"max_x,omitempty"`
	MaxY                 float32  `protobuf:"fixed32,5,opt,name=max_y,json=maxY,proto3" json:"max_y,omitempty"`
	MaxZ                 float32  `protobuf:"fixed32,6,opt,name=max_z,json=maxZ,proto3" json:"max_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightLocation) Reset()         { *m = LightLocation{} }
func (m *LightLocation) String() string { return proto.CompactTextString(m) }
func (*LightLocation) ProtoMessage()    {}
func (*LightLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{5}
}
func (m *LightLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightLocation.Unmarshal(m, b)
}
func (m *LightLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightLocation.Marshal(b, m, deterministic)
}
func (dst *LightLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightLocation.Merge(dst, src)
}
func (m *LightLocation) XXX_Size() int {
	return xxx_messageInfo_LightLocation.Size(m)
}
func (m *LightLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_LightLocation.DiscardUnknown(m)
}

var xxx_messageInfo_LightLocation proto.InternalMessageInfo

func (m *LightLocation) GetMinX() float32 {
	if m != nil {
		return m.MinX
	}
	return 0
}

func (m *LightLocation) GetMinY() float32 {
	if m != nil {
		return m.MinY
	}
	return 0
}

func (m *LightLocation) GetMinZ() float32 {
	if m != nil {
		return m.MinZ
	}
	return 0
}

func (m *LightLocation) GetMaxX() float32 {
	if m != nil {
		return m.MaxX
	}
	return 0
}

func (m *LightLocation) GetMaxY() float32 {
	if m != nil {
		return m.MaxY
	}
	return 0
}

func (m *LightLocation) GetMaxZ() float32 {
	if m != nil {
		return m.MaxZ
	}
	return 0
}

// Devices do not emit light, their coordinates are given as a (3D) point
// and scaling factor that's applied uniformly to the contained lights
type DeviceLocation struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	ScaleX               float32  `protobuf:"fixed32,4,opt,name=scale_x,json=scaleX,proto3" json:"scale_x,omitempty"`
	ScaleY               float32  `protobuf:"fixed32,5,opt,name=scale_y,json=scaleY,proto3" json:"scale_y,omitempty"`
	ScaleZ               float32  `protobuf:"fixed32,6,opt,name=scale_z,json=scaleZ,proto3" json:"scale_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceLocation) Reset()         { *m = DeviceLocation{} }
func (m *DeviceLocation) String() string { return proto.CompactTextString(m) }
func (*DeviceLocation) ProtoMessage()    {}
func (*DeviceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_e551d0fc2c0f6a4a, []int{6}
}
func (m *DeviceLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceLocation.Unmarshal(m, b)
}
func (m *DeviceLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceLocation.Marshal(b, m, deterministic)
}
func (dst *DeviceLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceLocation.Merge(dst, src)
}
func (m *DeviceLocation) XXX_Size() int {
	return xxx_messageInfo_DeviceLocation.Size(m)
}
func (m *DeviceLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceLocation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceLocation proto.InternalMessageInfo

func (m *DeviceLocation) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *DeviceLocation) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *DeviceLocation) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *DeviceLocation) GetScaleX() float32 {
	if m != nil {
		return m.ScaleX
	}
	return 0
}

func (m *DeviceLocation) GetScaleY() float32 {
	if m != nil {
		return m.ScaleY
	}
	return 0
}

func (m *DeviceLocation) GetScaleZ() float32 {
	if m != nil {
		return m.ScaleZ
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceProviderArchetype)(nil), "libhuestacean.DeviceProviderArchetype")
	proto.RegisterType((*DeviceArchetypeLight)(nil), "libhuestacean.DeviceArchetypeLight")
	proto.RegisterType((*DeviceArchetype)(nil), "libhuestacean.DeviceArchetype")
	proto.RegisterMapType((map[uint32]*DeviceArchetypeLight)(nil), "libhuestacean.DeviceArchetype.LightsEntry")
	proto.RegisterType((*DeviceProvider)(nil), "libhuestacean.DeviceProvider")
	proto.RegisterType((*Device)(nil), "libhuestacean.Device")
	proto.RegisterType((*LightLocation)(nil), "libhuestacean.LightLocation")
	proto.RegisterType((*DeviceLocation)(nil), "libhuestacean.DeviceLocation")
	proto.RegisterEnum("libhuestacean.DeviceProvider_State", DeviceProvider_State_name, DeviceProvider_State_value)
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_device_e551d0fc2c0f6a4a) }

var fileDescriptor_device_e551d0fc2c0f6a4a = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x8e, 0xd3, 0x3c,
	0x14, 0xfd, 0x9c, 0xfe, 0x7c, 0x33, 0x37, 0x4d, 0x1b, 0x79, 0x40, 0x13, 0x21, 0x16, 0x25, 0x48,
	0xa8, 0x42, 0xa8, 0x8b, 0xb2, 0x61, 0xd8, 0x20, 0x98, 0x41, 0x68, 0xa4, 0x22, 0x8d, 0x32, 0x9b,
	0xb6, 0x0b, 0x22, 0x37, 0x31, 0xad, 0x35, 0x89, 0x53, 0x25, 0x6e, 0x27, 0xe9, 0x9e, 0x05, 0x0b,
	0x1e, 0x8d, 0xa7, 0xe0, 0x45, 0x50, 0xed, 0xd8, 0xd3, 0x56, 0x02, 0x89, 0x9d, 0xef, 0x39, 0xf7,
	0xf8, 0x9c, 0xeb, 0x1b, 0x05, 0x3a, 0x31, 0xdd, 0xb0, 0x88, 0x0e, 0x57, 0x79, 0x26, 0x32, 0xec,
	0x24, 0x6c, 0xbe, 0x5c, 0xd3, 0x42, 0x90, 0x88, 0x12, 0xee, 0x7f, 0x47, 0x70, 0x7e, 0x25, 0xf9,
	0x9b, 0x3c, 0xdb, 0xb0, 0x98, 0xe6, 0xef, 0xf3, 0x68, 0x49, 0x45, 0xb5, 0xa2, 0x18, 0x43, 0x93,
	0x93, 0x94, 0x7a, 0xa8, 0x8f, 0x06, 0xa7, 0x81, 0x3c, 0xe3, 0x11, 0x3c, 0x4e, 0xb2, 0xfb, 0x30,
	0x21, 0x82, 0xf2, 0xa8, 0x0a, 0x8b, 0xf5, 0x6a, 0x95, 0xe5, 0x82, 0xc6, 0x9e, 0xd5, 0x47, 0x83,
	0x93, 0xe0, 0x2c, 0xc9, 0xee, 0xc7, 0x8a, 0xbb, 0xd5, 0x14, 0x7e, 0x01, 0xbd, 0x94, 0x94, 0xe1,
	0x9e, 0xce, 0x6b, 0xf4, 0xd1, 0xc0, 0x09, 0x9c, 0x94, 0x94, 0x63, 0x23, 0xf0, 0x43, 0x78, 0xa4,
	0xa2, 0x98, 0x08, 0x63, 0xb6, 0x58, 0x0a, 0xfc, 0x09, 0xdc, 0x98, 0x7e, 0x25, 0xeb, 0x44, 0x84,
	0x49, 0x16, 0x11, 0xc1, 0x32, 0x2e, 0x33, 0xd9, 0xa3, 0xa7, 0xc3, 0x83, 0x69, 0x86, 0xb2, 0x7f,
	0x5c, 0xf7, 0x04, 0xbd, 0x5a, 0xa5, 0x01, 0xff, 0x17, 0x82, 0xde, 0x91, 0x03, 0x7e, 0x05, 0x98,
	0xe4, 0x34, 0x4c, 0x76, 0xca, 0x22, 0x4c, 0xb3, 0x0d, 0x99, 0x27, 0x6a, 0xe4, 0x93, 0xc0, 0x25,
	0xb9, 0x8a, 0x50, 0x7c, 0x56, 0x38, 0xfe, 0x00, 0x6d, 0xd5, 0xe9, 0x59, 0xfd, 0xc6, 0xc0, 0x1e,
	0xbd, 0x3c, 0x0a, 0x70, 0x74, 0xbb, 0x0a, 0x54, 0x7c, 0xe4, 0x22, 0xaf, 0x82, 0x5a, 0xf9, 0xe4,
	0x0b, 0xd8, 0x7b, 0x30, 0x76, 0xa1, 0x71, 0x47, 0x2b, 0xe9, 0xe8, 0x04, 0xbb, 0x23, 0xbe, 0x80,
	0xd6, 0x86, 0x24, 0x6b, 0x2a, 0xdf, 0xd4, 0x1e, 0x3d, 0xff, 0xbb, 0x87, 0xbc, 0x2b, 0x50, 0x8a,
	0xb7, 0xd6, 0x1b, 0xe4, 0xff, 0x44, 0xd0, 0x3d, 0x5c, 0x29, 0x7e, 0x06, 0x1d, 0xa2, 0xfb, 0x43,
	0x16, 0xd7, 0x66, 0xb6, 0xc1, 0xae, 0x63, 0xb3, 0x6c, 0x6b, 0x6f, 0xd9, 0x17, 0xd0, 0x2a, 0x04,
	0x11, 0x54, 0xae, 0xab, 0xfb, 0x87, 0x20, 0xda, 0x64, 0x78, 0xbb, 0x6b, 0x0d, 0x94, 0xc2, 0xbf,
	0x86, 0x96, 0xac, 0xb1, 0x0b, 0x9d, 0x2b, 0x56, 0x44, 0x19, 0xe7, 0x34, 0x12, 0x34, 0x76, 0xff,
	0xc3, 0x5d, 0x80, 0x4b, 0x55, 0x32, 0xbe, 0x70, 0x11, 0xee, 0x81, 0x7d, 0x43, 0x79, 0xcc, 0xf8,
	0x62, 0xcc, 0xf8, 0x9d, 0x6b, 0x61, 0x07, 0x4e, 0x2f, 0x4d, 0x7f, 0xc3, 0x7f, 0x07, 0x6d, 0xe5,
	0xf4, 0xaf, 0x63, 0x38, 0x6a, 0x0c, 0xff, 0x07, 0x02, 0xe7, 0xe0, 0xcb, 0xc0, 0x67, 0xd0, 0x4a,
	0x19, 0x0f, 0x4b, 0x79, 0x83, 0x15, 0x34, 0x53, 0xc6, 0x27, 0x1a, 0xac, 0xa4, 0x56, 0x81, 0x53,
	0x0d, 0x6e, 0xe5, 0x13, 0x28, 0x70, 0x26, 0x41, 0x52, 0x86, 0xa5, 0xd7, 0xac, 0x41, 0x52, 0x4e,
	0x34, 0x58, 0x79, 0x2d, 0x03, 0x4e, 0x35, 0xb8, 0xf5, 0xda, 0x06, 0x9c, 0xf9, 0xdf, 0xcc, 0x82,
	0x4c, 0xa0, 0x0e, 0x20, 0x1d, 0x06, 0x95, 0xbb, 0x4a, 0xa7, 0x40, 0xd5, 0xae, 0xd2, 0xf6, 0x68,
	0x8b, 0xcf, 0xe1, 0xff, 0x22, 0x22, 0x09, 0x35, 0xee, 0x6d, 0x59, 0x4e, 0x1e, 0x08, 0x9d, 0x40,
	0x11, 0xd3, 0x07, 0x42, 0xa7, 0x50, 0xc4, 0x6c, 0xde, 0x96, 0x7f, 0x84, 0xd7, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x80, 0xf6, 0x76, 0xbc, 0x21, 0x04, 0x00, 0x00,
}
